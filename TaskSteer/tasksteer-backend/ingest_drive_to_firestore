import os, json, time
from io import BytesIO
from datetime import datetime
import google.generativeai as genai
from dateparser.search import search_dates
from google.oauth2.credentials import Credentials
from google_auth_oauthlib.flow import InstalledAppFlow
from googleapiclient.discovery import build
from googleapiclient.http import MediaIoBaseDownload
from google.auth.transport.requests import Request
import firebase_admin
from firebase_admin import credentials, firestore

# === FIREBASE INIT ===
cred = credentials.Certificate("serviceAccountKey.json")
firebase_admin.initialize_app(cred)
db = firestore.client()

# === CONFIG ===
FOLDER_ID = "YOUR_FOLDER_ID"
CLIENT_SECRET_FILE = "auth.json"
TOKEN_FILE = "token.json"
PROCESSED_IDS_PATH = "processed_ids.json"
SCOPES = [
    "https://www.googleapis.com/auth/drive.readonly",
    "openid", 
    "https://www.googleapis.com/auth/userinfo.email"
]

# === AUTH ===
def get_credentials():
    creds = None
    if os.path.exists(TOKEN_FILE):
        creds = Credentials.from_authorized_user_file(TOKEN_FILE, SCOPES)
    if not creds or not creds.valid:
        if creds and creds.expired and creds.refresh_token:
            creds.refresh(Request())
        else:
            flow = InstalledAppFlow.from_client_secrets_file(CLIENT_SECRET_FILE, SCOPES)
            creds = flow.run_local_server(port=0)
        with open(TOKEN_FILE, 'w') as token:
            token.write(creds.to_json())
    return creds

creds = get_credentials()
drive_service = build("drive", "v3", credentials=creds)

# === GEMINI ===
genai.configure(api_key=os.getenv("GEMINI_API_KEY") or "AIzaSyCzbuy417OaFtbyP-N1dD7IRCFUPlPBNVs")
model = genai.GenerativeModel("models/gemini-1.5-pro-latest")

def normalize_deadline(raw_deadline, task_text, base_date):
    text = (raw_deadline or "") + " " + (task_text or "")
    hour, minute = 23, 59
    if "morning" in text: hour, minute = 10, 0
    elif "afternoon" in text: hour, minute = 14, 0
    elif "evening" in text: hour, minute = 18, 0
    elif "night" in text: hour, minute = 20, 0
    try:
        results = search_dates(text, settings={"RELATIVE_BASE": base_date, "PREFER_DATES_FROM": "future"})
        if results:
            dt = results[0][1]
            return dt.replace(hour=hour, minute=minute)
    except:
        pass
    return base_date.replace(hour=hour, minute=minute)

def extract_tasks_with_gemini(transcript_text_value: str, meeting_date_value: str):
    prompt = f"""Extract actionable tasks from the following IT meeting transcript dated {meeting_date_value}. Return JSON list only:
Transcript:
{transcript_text_value}
Output format:
[
  {{"task": "...", "assignee": "...", "deadline": "..."}},
  {{"task": "...", "assignee": "...", "deadline": "..."}}
]"""
    try:
        response = model.generate_content(prompt)
        data = response.text.strip()
        return json.loads(data[data.find("["):data.rfind("]")+1])
    except Exception as e:
        print("‚ùå Gemini extraction failed:", e)
        return []

def write_task_to_firestore(task_data):
    try:
        db.collection("tasks").add({
            "title": task_data.get("task"),
            "assignee": task_data.get("assignee", "Unspecified"),
            "dueDate": task_data.get("deadline"),
            "completed": False,
            "timestamp": datetime.now()
        })
        print(f"‚úÖ Task added to Firestore: {task_data.get('task')}")
    except Exception as e:
        print(f"‚ùå Failed to write task to Firestore: {e}")

if os.path.exists(PROCESSED_IDS_PATH):
    with open(PROCESSED_IDS_PATH, "r") as f:
        processed_files = set(json.load(f))
else:
    processed_files = set()

def save_processed_ids():
    with open(PROCESSED_IDS_PATH, "w") as f:
        json.dump(list(processed_files), f)

def poll_drive_for_txt_files(poll_interval=60):
    print(f"üîÅ Polling Google Drive folder every {poll_interval} seconds...\n")
    while True:
        try:
            results = drive_service.files().list(
                q=f"'{FOLDER_ID}' in parents and mimeType='text/plain' and trashed = false",
                orderBy="createdTime desc",
                pageSize=10,
                fields="files(id, name, createdTime)"
            ).execute()

            files = results.get("files", [])
            for file in files:
                file_id = file["id"]
                if file_id in processed_files:
                    continue

                request_drive = drive_service.files().get_media(fileId=file_id)
                fh = BytesIO()
                downloader = MediaIoBaseDownload(fh, request_drive)
                done = False
                while not done:
                    _, done = downloader.next_chunk()
                content = fh.getvalue().decode("utf-8")

                base_date = datetime.today()
                meeting_date_str = base_date.strftime("%Y-%m-%d")
                tasks = extract_tasks_with_gemini(content, meeting_date_str)

                for task in tasks:
                    deadline = normalize_deadline(task.get("deadline", ""), task["task"], base_date)
                    task["deadline"] = deadline.strftime("%Y-%m-%d %H:%M")
                    write_task_to_firestore(task)

                processed_files.add(file_id)
                save_processed_ids()

            time.sleep(poll_interval)

        except Exception as e:
            import traceback
            traceback.print_exc()
            print("‚ùå Polling error. Retrying in 15 seconds...")
            time.sleep(15)

if __name__ == "__main__":
    poll_drive_for_txt_files(poll_interval=10)

import os
from flask import Flask, request, jsonify
from flask_cors import CORS
from werkzeug.utils import secure_filename
import firebase_admin
from firebase_admin import credentials, firestore
import vertexai
from vertexai.generative_models import GenerativeModel

# 🔐 Load Gemini API key from environment
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
if not GEMINI_API_KEY:
    raise EnvironmentError("GEMINI_API_KEY not set in environment.")

# ✅ Set service account and initialize Firebase
cred = credentials.Certificate("serviceAccountKey.json")
if not firebase_admin._apps:
    firebase_admin.initialize_app(cred)
db = firestore.client()

# 🚀 Start Flask app
app = Flask(__name__)
CORS(app)

# 📥 Handle transcript upload and task extraction
@app.route('/upload', methods=['POST'])
def upload_transcript():
    if 'transcript' not in request.files:
        return jsonify({'error': 'No transcript file uploaded'}), 400
    
    file = request.files['transcript']
    filename = secure_filename(file.filename)
    transcript_text = file.read().decode('utf-8')
    print(f"Transcript received. Length: {len(transcript_text)}")

    try:
        # 🌟 Init Gemini model
        vertexai.init(project="your-gcp-project-id", location="us-central1")
        model = GenerativeModel("gemini-1.5-pro")

        prompt = f"Extract action items as tasks with assignees and deadlines if any from this transcript:\n{transcript_text}"
        response = model.generate_content(prompt)
        task_output = response.text.strip()

        print("Gemini raw response:", response)

        # 🔍 Parse and save tasks line by line
        for line in task_output.splitlines():
            if line.strip():
                doc_ref = db.collection('tasks').document()
                doc_ref.set({
                    "task": line.strip(),
                    "source": filename
                })
                print("✅ Task saved to Firestore:", line.strip())

        return jsonify({"status": "success", "tasks": task_output}), 200

    except Exception as e:
        print("🔥 Upload error:", str(e))
        return jsonify({'error': str(e)}), 500

# 📤 Get all tasks from Firestore
@app.route('/tasks', methods=['GET'])
def get_tasks():
    tasks_ref = db.collection('tasks')
    tasks = [doc.to_dict() for doc in tasks_ref.stream()]
    return jsonify(tasks), 200

# 🏁 Run Flask server
if __name__ == '__main__':
    print("🚀 Running Gemini backend on http://127.0.0.1:8080")
    app.run(port=8080, debug=True)
